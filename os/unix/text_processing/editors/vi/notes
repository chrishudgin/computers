vim has extensive built-in help and a tutor program

:help [topic]

$ vimtutor

*****

Case-insensitive search toggle in vim:

:set ignorecase
:set noignorecase

*****

Turn off highlighting until next search in vim:

:nohls   ("nohls" is short for "nohlsearch")

*****

Read shell command output into file:

:r !somecommand

Example:

:r !ls -l

*****

Visual (i.e. visual selection) modes:

v for character-oriented visual mode
V for line-oriented visual mode
Ctrl-V for block (rectangular) oriented visual mode

To leave visual mode, use Esc to discard selection or y to yank it, d to
delete it, etc.

*****

Some distributions install basic versions of vim with enhanced features omitted
at compile time.  In RHEL 7, for example, /usr/bin/vi is installed by the
vim-minimal package and does not include features such as color highlighting,
while the full-featured vim is available as /usr/bin/vim provided by the
vim-enhanced package.  In such cases, "vi" and "vim" are two different
executables, but in RHEL 7, users with UID > 200 get "vi" aliases to "vim" via
/etc/profile.d/vim.sh.

*****

vim supports regular expressions in searches, but some metacharacters like
+ { } < > must be escaped with a backslash.

*****

Text can be copied into a named register (a-z) with:

[count]"<regname>y|d|c<movement>

where y, d, or c are the usual yank, delete, and change commands.

Example:
3"zyw  (copies three words into register "z")

The unnamed register (default buffer) is also updated at the same time.

To put from a named register:

[count]"<regname>p|P

Example:
"zp  (puts contents of register "z" after cursor)

Named registers provide a way to save text even when subsequent editing
commands overwrite the unnamed register (default buffer).  Both the named and
unnamed registers are saved between vim sessions in .viminfo and are global to
all editing sessions on all files, so that text can be copied to a buffer in
one file's editing session and pasted to a different file in a subsequent
editing session.

All registers can be shown with
:registers

*****

ex mode has a command history mechanism accessed with the up and down arrow
keys, as well as tab completion for commands.

*****

Move to the next word, treating any embedded punctuation like dashes or underscores as part of the word:
W
Useful when deleting an entire word forward from the cursor (dW).

Move to the beginning of a word or the previous word, treating any embedded
punctuation like dashes or underscores as part of the word:
B
Useful when deleting an entire word backward from the cursor (dB).

*****

Delete entire word on which the cursor is located, including any embedded
punctuation in the word like dashes or underscores:
daW

*****

Change entire line:
cc
