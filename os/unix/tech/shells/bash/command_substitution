Escape sequences:

Bash treats some escape sequences differently depending on whether command
substitution is done using the old style with backticks, e.g. `some command`,
or the new style with a dollar sign and parentheses, e.g. $(some command).

Examples:

$ echo `echo "\\\\\\\\\\\"`  # 4n-1 backslashes needed per literal \
\\\

$ echo $(echo "\\\\\\")      # 2 backslashes needed per literal \
\\\

$ echo `echo \\\`\\\``       # 3 backslashes needed per literal `
``

$ echo $(echo \`\`)          # 1 backslash needed per literal `
``

*****

Nesting:

Within backticks ``, commands can be nested arbitrarily deep (as they can with
the newer $() command substitution syntax), but after the first level of
nesting (with n=1 backslash preceding each nested backtick), each subsequent
level of nesting requires 2n+1 consecutive backslashes to escape each of that
level's backticks.  So 1, 3, 7, 15, etc. backslashes per nested backtick are
required for consecutive levels of nesting, quickly causing the code to become
hard to read and maintain.
