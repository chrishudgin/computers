# cal:  nicer interface to /usr/bin/cal
#
# Modified to handle multiple month arguments or month ranges a - b

case $# in
0)	set `date`; months=$2; y=$6 ;;	# no args; use today
1)	months=$1; set `date`; y=$6 ;;	#1 arg: use this year
2)	case $2 in			#2 args
	[1-9]|10|11|12|[A-Za-z]*)	months="$1 $2"; set `date`; y=$6 ;;
	*)	months=$1; y=$2 ;;
	esac
	;;
*)	months=$@
	eval last=\${$#}
	case $last in
	[1-9]|10|11|12|[A-Za-z]*)
		y=`date | awk '{ print $6 }'`
		yearinargs=0
		;;
	*)	y=$last
		yearinargs=1
		months=`echo $months | sed 's/ [^ ]*$//'` # remove year
		;;
	esac
	if test $2 = "-"; then
		mb=$1; me=$3
		for mbound in mb me
		do
			m=`eval echo '$'${mbound}`
			case $m in
			jan*|Jan*)	eval $mbound=1 ;;
			feb*|Feb*)	eval $mbound=2 ;;
			mar*|Mar*)	eval $mbound=3 ;;
			apr*|Apr*)	eval $mbound=4 ;;
			may*|May*)	eval $mbound=5 ;;
			jun*|Jun*)	eval $mbound=6 ;;
			jul*|Jul*)	eval $mbound=7 ;;
			aug*|Aug*)	eval $mbound=8 ;;
			sep*|Sep*)	eval $mbound=9 ;;
			oct*|Oct*)	eval $mbound=10 ;;
			nov*|Nov*)	eval $mbound=11 ;;
			dec*|Dec*)	eval $mbound=12 ;;
			[1-9]|10|11|12)	;;		# numeric month
			*) echo "not a valid month $m" 1>&2; exit 1 ;;
			esac
		done

		if test $me -lt $mb; then
			me=`expr $me + 12`
			if test $yearinargs -eq 1; then
				y=`expr $y - 1`
			fi
		fi

		m=$mb
		while test $m -le $me
		do
			if test $m -eq 13; then
				y=`expr $y + 1`
			fi
			if test $m -gt 12; then
				/usr/bin/cal `expr $m - 12` $y
			else
				/usr/bin/cal $m $y
			fi
			m=`expr $m + 1`
			echo
		done

		exit 0
	fi
	;;
esac

for m in $months
do
	case $m in
	jan*|Jan*)	m=1 ;;
	feb*|Feb*)	m=2 ;;
	mar*|Mar*)	m=3 ;;
	apr*|Apr*)	m=4 ;;
	may*|May*)	m=5 ;;
	jun*|Jun*)	m=6 ;;
	jul*|Jul*)	m=7 ;;
	aug*|Aug*)	m=8 ;;
	sep*|Sep*)	m=9 ;;
	oct*|Oct*)	m=10 ;;
	nov*|Nov*)	m=11 ;;
	dec*|Dec*)	m=12 ;;
	[1-9]|10|11|12)	;;		# numeric month
	*)		y=$m; m="" ;;	# plain year
	esac

	/usr/bin/cal $m $y		# run the real one
done
