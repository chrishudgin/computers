5.1

case syntax is given

case conditions can be joined with | meaning "or"

set a b c

will set $1 to a, $2 to b, $3 to c
This is useful for setting the positional parameters to the fields of a
command, such as the "date" command, for further processing.

$- contains the list of options (args beginning with a dash) sent to the
shell.

for and while loops are like those in C, including break and continue
next in a loop causes the next line to be read and pattern matching to be
   started from the top of the list of patterns again

exit causes awk to jump to the END pattern

split(s, arr, sep)  # splits string s into elements of array arr, starting
                    # with element 1
getline()  # reads next line of input

Table 4.5 shows awk's built-in functions, including mathematical functions

awk provides associative arrays
for (var in array)   # loops over the subscripts (not elements) of array
                     # into var.  Ordering of subscripts is unpredictable.

string concatenation is done as follows:
   str1 = str1 str2 str3 ...   # concatenation is implied by adjacent strings

5.2

A common idiom for reporting a syntax error in a shell scripts is:

case $# in
0)	echo 'Usage: cmd arg' 1>&2; exit 1 ;;
esac

This way the error message output goes to stderr even if stdout is redirected.

Note that ;; is optional in the final clause of a "case" statement.

It's a good idea in some scripts to set PATH

Quick conditional testing for one-liners:
cmd && second cmd
cmd || alternate cmd

5.3

for, while, and until loop syntax is shown

The values of field variables in awk can be (re)assigned with (e.g.) $1 = "foo"

: is a shell builtin that always evaluates to true, e.g.
while :    # sic
do
	# blah blah
done

To set a default value for a variable:
t=${1-60}   # if $1 is set, $t is set to the value of $1; otherwise, $t is
            # set to 60

Other forms:
${var-thing}  # value of $var if defined; otherwise thing
${var+thing}  # thing if $var is defined, otherwise nothing
${var=thing}  # like the - syntax, but if $var is undefined, then var=thing

5.4

trap 'sequence of commands' signal numbers
e.g.
trap 'rm -f $tmpfile; exit 1' 1 2 15

signal 0 is *any* shell exit

trap does not run exit by default, so you must include it if you want an exit
   instead of the shell continuing to execute where it left off after trap
   handling is complete.

trap sets trap handlers in the current shell and any child shells that are
   subsequently started.

test -t   tests if shell is attached to a terminal

5.5

shift moves shell arguments one place to the left, discarding $1
This is useful when you want to process a fixed number of arguments as options
or commands and then the rest of the arguments are assumed to be filenames.

Do not use shift inside a "for" loop that is iterating over the positional
parameters.  You could use while and case statements instead in this situation.

eval is used to "evaluate" and run a string, treating it as a command line.
This is useful if the string is something like "who | sort" which cannot
be run strictly as-is in a script, because "who | sort" is not a valid arg0
(i.e. there is no program called "who | sort").  eval will collect the input
as though it were an ordinary command line and separate the arguments.

5.6

To treat a line of input as a single argument to the shell, do:

IFS='
'

5.7

The "read" shell built-in can have redirected I/O in later versions of Unix.
Likewise, so can control flow operators:

for i in a b c
do
	# blah blah
done < /etc/passwd

for i in a b c
do
	# blah blah
done | awk '{print $1}'


To loop over all arguments:

for i     # an explicit "in list" is not required here
do
	# blah blah
done


The "break" shell command breaks out of the innermost loop.

$* is a list of arguments to the shell, but the shell breaks them up into
discrete fields separated by the IFS.  So, arguments of '1 2' 3 would be
broken up into three separate fields, 1 2 and 3, despite the use of single
quotes.

"$*" will group all arguments into a single string.  '1 2' 3 would end up
being interpreted by the shell as a string "1 2 3".

To preserve exactly the arguments sent to the shell, without them being further
grouped or broken apart, use "$@"  (note the use of double quotes)
$@ (without quotes) is exactly the same as $*

5.8

To make sure that an argument that might begin with a dash (-) is not treated
as an option to the shell, one thing you can do is prefix it with some text:
set X`ls -l news`  # if permissions field begins with -, it's okay, as it
                   # becomes X-rwx...

In-line text strings can include newlines.  For example:
echo "
This output begins and ends with a blank line.
"

5.9

diff -e oldfile newfile # creates a sequence of append/change/delete ed
                        # commands to convert oldfile to newfile

There is a useful example of code to process command line options in the
source of the "get" script.

Commands inside { } run in the current shell.
Commands inside ( ) run in a subshell.  An exit run from within the subshell
   will only exit that subshell, not the parent shell.

5.10

The shell is useful not only as a complete programming language but also as
a prototyping language, and as a "glue" language to utilize other programs
written in any language.
