4.1

grep -n   # shows line numbers (within files) that match pattern
grep -c   # shows only a count of lines that match pattern
grep -f filename  # take patterns from contents of filename; search in
                  # parallel for all such patterns

* matching in grep is "greedy," matching as many characters as it can
   (zero or more)
However, * applies to only a single character or match from a character class
   e.g. grep [a-z]* will match any number of consecutive lower case characters,
      including zero such characters
To match one or more characters, use, e.g., [a-z][a-z]* or (egrep only) [a-z]+
To match zero or one characters, use, e.g.  [a-z]?

There is no grep regular expression that matches a newline character

fgrep works only on literal strings, not full regular expressions

egrep has the following enhancements compared to grep:
   handles | as an "or" operator
   characters can be grouped into a pattern with ( )
      e.g. (xy)* which would match an empty string, xy, xyxy, xyxyxy, etc.
      e.g. to(day|morrow)
However, egrep does not recognize tagged regular expressions; grep does.
   e.g. grep '\(abc\)def\1' # matches abcdefabc

Table 4.1 contains a list of regular expressions that grep and egrep recognize.

4.2

uniq will not only discard duplicate lines from sorted input, it will also
    discard multiple blank lines even if the input is not sorted
uniq -d  # prints only duplicate lines
uniq -u  # prints only unique lines
uniq -c  # counts number of occurrences of each line
         # (along with each line itself)

comm requires two sorted input files and prints their lines in common and
   lines that differ

tr translates each character from one set to the corresponding character in
   another set
tr -s  # replaces multiple repeated characters with a single character
tr -c  # complements (logical NOT) the set of characters given in the
       # input string

4.3

sed uses the same command syntax as ed, but forward and reverse line references
   are not possible in sed

By default, sed prints each input line (including the unaltered ones) in
   addition to the performing the explicitly specified commands given to it.

A sed command, such as a substitute command, can be prefixed with a pattern
   to match one or more lines (as in ed).  e.g. sed '/./s/^/	/'
   where the pattern /./ matches every non-empty line.  But all lines will
   still be printed, including the empty ones.

sed 3q   # prints first three lines, then exits.  Equivalent to head -3.

sed accepts multiple commands on a single command line, as long as the
   individual sed commands are separated by newlines.  The entire set of
   commands must be quoted so that the shell knows that the command input
   consists of multiple lines.

sed -f cmdfile  # reads sed commands (not the text input) from cmdfile
                 # text input still comes from stdin or another set of files

sed '/pattern/q'   # prints input up to and including the first line matching
                   # pattern, then quits

sed '/pattern/d'   # deletes each line that contains pattern, then prints
                   # the rest (not the deleted lines)

sed -n  # turns off printing except for commands that include the "p" command
   e.g. sed -n '/pattern/p'   # equivalent to grep
        sed -n '/pattern/!p'  # equivalent to grep -v
        sed '/pattern/d'      # equivalent to grep -v

sed can operate over a range of lines, e.g. sed '20,/^abc/d'
   or sed '/abc/,/def/p'   # print EACH range of lines from one matching abc
                           # to one matching def (could be multiple such ranges
                           # in the input)

To write some of the selected lines to a file:  sed -n '/pattern/w file1
                                                        /pattern/!w file2'

Shell patterns can be used in sed commands:  sed 's/fooval/'$FOO'/g'

Table 4.2 contains a list of sed commands

4.4

awk pattern {action}
    pattern {action}
    ...

awk -f cmdfile filenames ...
awk -F:  # : is any single character to be used as the field separator
         # default separator is any number of blanks and/or tabs
         # leading separators are discarded, so lines can start with blanks
         # or tabs without messing up the field variable assignments
         # FS is the corresponding variable within awk; it can be reassigned

Either pattern or action is optional.
   No pattern specified => perform action on each line
   No action specified => print matched lines

For each line in its input, awk checks for all matching patterns and performs
   the corresponding actions, then moves on to processing the next line.

The input record separator character is called RS.  Defaults to newline, but
   can be changed.

Only field names begin with a $ (e.g. $NF); variables do not (e.g. i or NR)

NR is the number of the current input record (by default, a line)

$0 refers to the entire input line (all of its fields combined)

printf works much like it does in C.

Testing for equality uses ==
Assignment is =

length(x)   # built in function that returns length of string x
substr(s,m[,n])  # returns substring of s beginning at position m and
                 # continuing for n characters or (if n is omitted) till the end
                 # character count in a string begins at 1
index(s1,s2)  # position of string s2 in s1

! is logical negation and precedes the expression to negate

# is used for comments

BEGIN and END are patterns with corresponding actions; each is optional

variables are defined simply by being used.  They do not have to be declared.
   Variables default to a value of 0 if used numerically or an empty string
   if used as a string.

Table 4.3 shows awk's built-in variables (FILENAME, FS ,NF, etc.)

Table 4.4 shows awk's operators (=, ||, etc.)--mostly as they are in C

|| and && are like the corresponding operators in C, not like the shell
   command operators/separators

~ is the match operator
