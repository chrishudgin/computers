3.1

Group shell commands with ( )
   This way, the output of the entire group of commands can be sent through
   a single pipeline:  (cmda; cmdb) | cmdc
   Or you can put a group of commands into the background:  (cmda; cmdb) &

However, ( ) is not needed when putting a pipeline into the background since
   the pipeline "counts" as a single command as far as & is concerned:
   cmda | cmdb &

Since the shell interprets redirection operators before running the programs
   on a command line, this is legal: $ > junk echo Hello

3.2

One kind of quotes can protect another:  echo "Don't do that"
Quotes can be used within a string, not just outside it.  Example:  abc'$'def 

Table 3.1 lists all shell metacharacters and their meaning

3.4

$0 is the name of the shell script being executed

3.6

Positional parameter values *cannot* be directly assigned as in: 1=foo; echo $1

A variable can be set in a subshell two ways:
var=foo; export var  # var is set in both the current shell and the subshell
var=foo cmdname    # Variables must be set before cmdname appears on the
                   # command line

3.7

In a here document, if some part of the word used to set the document end
delimiter is quoted with quotes or a backslash, then the entire here document
is taken literally (no shell interpretation):

grep "$*" <<'End'
   # no shell interpretation
End

grep "$*" <<\End
   # no shell interpretation
End
