General tips:

Before exam:

Review https://www.lisenet.com/2016/passed-rhce-on-rhel-7/

Common reasons for failing:

Not reading all tasks at the start of the exam, before starting any work.
Not reading each task very carefully.
Failing to recognize ordering dependencies between tasks, resulting in the
   need for rework if they are not done in the most logical or necessary order.
Spending too much time researching or troubleshooting a given task.
Failing to ensure that all changes persist through reboot and contine to work
   correctly afterward.
Failing to reboot all VMs one last time before finishing.  Any VM that cannot
   reboot unattended will result in a failing exam grade.

During exam:

SERVICES (must be enabled and running)
FIREWALL (must be enabled, running, configured for all necessary ports/services)
SELINUX (must be enforcing, verified all with restorecon)
PERSISTENCE/REBOOT (do checks before and after reboot)

Remember how to break into a system using rd.break, remount, chroot, and
touch /.autorelabel

Remember how to boot into a debugging mode with systemd.unit=emergency.target
or rescue.target on the kernel command line, or enable the debug-shell service
and reboot to get a root shell on tty9 during boot.

Expect to have to configure a persistent static route to access VMs.
   It may be necessary to create a static route in, e.g.,
   /etc/sysconfig/network-scripts/route-eth0, as:
      10.0.0.0/8 via 192.168.4.2 dev eth0
   or through nmcli, as:
      nmcli con mod system-eth0 ipv4.addresses "192.168.4.10/8 192.168.4.2"
      nmcli con mod system-eth0 ipv4.method manual
   where 192.168.4.2 is the gateway.
   followed by "systemctl restart network"
   Some exam candidates report no gateway or DNS server information provided.
       In this case, is the IPA server both?
Use ssh to access VMs rather than working on console to aid in copy/paste
   Keep multiple ssh sessions per VM in case a command inadvertently prevents
      new ssh sessions from being opened.
Run semanage fcontext and restorecon when necessary, including on any files
   that are copied to a server from an external source (such as TLS keys
   or Kerberos keytab files).
Ensure firewall ports are permanently opened.
Consider using --timeout=<secs> with firewall-cmd to revert potentially
   dangerous temporary (no --permanent) changes automatically in case they
   cause a problem; or run firewall-cmd commands on the console instead of in
   ssh sessions.
Ensure services are started and enabled and verify that they start at boot.
# yum install setroubleshoot-server
    provides sealert command to explain SELinux AVC denial messages in
    /var/log/messages and /var/log/audit/audit.log;
    To find them:  grep sealert /var/log/messages
                   grep AVC /var/log/audit/audit.log

Service-specific access control is generally preferred over firewalld access
control where possible.

If necessary to determine proper SELinux contexts for targets like files or
ports:
# yum whatprovides sepolicy
(The package is policycoreutils-devel)
# yum install policycoreutils-devel
# sepolicy manpage -a -p /usr/share/man/man8
# mandb
# man -k _selinux | grep <some_service_like_ftpd>

# yum install bash-completion
Remember to use _netdev in /etc/fstab for network storage devices/filesystems
   (NFS, SMB, iSCSI)

Remember to check for the use of any non-standard ports and use "semanage port" commands to configure SELinux to allow services to use them.

#####

iSCSI:

Target packages:
# yum group install "File and Storage Server"
   (installs targetcli and other packages)
Target service:
   target.service (NOT targetd.service)
   IMPORTANT:  Start and enable target.service immediately after finishing
      targetcli configuration, or better yet before running targetcli.

Initiator packages:
# yum group install "Network File System Client"
   (installs iscsi-initiator-utils and other packages)
Initiator services:
   iscsid.service
   iscsi.service

References:
   Use tab completion in targetcli (man page also has limited info)
   iscsiadm man page for discoverydb and login syntax

#####

Kerberos:

Based on the contents of the RH134/RH254 courses, the only steps needed to
configure Kerberos on the EX300 exam may be to install the "Directory Client"
package group, set DNS client resolution with nmcli, run "authconfig-gtk /
authconfig-tui" or "ipa-client-install --mkhomedir
[--domain=somedomain.example.com] [--no-ntp]", ensure that the sssd service is
enabled and started.  If authconfig-tui must be used, they should give you a
keytab file to copy into place (/etc/krb5.keytab) for your client VMs,
downloaded using (e.g.)
   wget -O /etc/krb5.keytab http://somewhere.example.com/my.keytab

According to Sander van Vugt's crash course notes, Kerberized login is likely
to be set up already.  This can be verified by using ssh to log in as a
Kerberized user account and running "klist" to view the principals attached to
the login session (the default shown should be <username>@<REALM>).   The only
step necessary to obtain additional Kerberos credentials will be to copy the
specified /etc/krb5.keytab file into place as root for each VM.  Run "klist -k"
to verify that the necessary credentials are present in the keytab after it has
been copied to the target system.

Alternatively, as root, enter the following command to verify that Kerberos
user authentication is working:
# kinit admin  (enter the password of the "admin" user on the Kerberos server)

#####

Network teaming:

Link aggregation on the exam can be done either with bonding or teaming, but
teaming is recommended.

Examples of nmcli syntax for teaming are in nmcli-examples(5)
Examples of runner configurations in JSON syntax are in
   /usr/share/doc/teamd-1.9/example_ifcfgs
The IP address for a team interface must be added with nmcli before the
   method is set to manual.
teamnl is the command to modify a team's configuration options other than those
   that are managed by nmcli.

Order of steps for configuring a new team connection with nmcli commands:
0. Make sure devices that are to be used as team slaves do not have an existing
   configuration.  If they do, disconnect them and remove their configs.
1. Create the team interface.
2. Assign static IP address(es) if appropriate.
3. Set IPv4 method to manual if static IPv4 addresses are being used.
4. Assign network devices (what teamd calls "ports") to the team interface.
5. Bring up the team interface.
6. Bring up the team interface's "ports".

Examples of steps 1 and 4 are documented in nmcli-examples(5).

#####

MariaDB:

# yum groupinstall "MariaDB Database Client"
# yum groupinstall "MariaDB Database Server"

If connectivity between Apache and MariaDB is needed:
# yum install php php-mysql

Security hardening including setting the MariaDB root password:
# mysql_secure_installation

Configuration:

Configuration files are /etc/my.cnf{,.d/*.cnf}

Sample configuration files:
/usr/share/mysql/*.cnf  (note that this is not under /usr/share/doc)

List all parameters for mysqld that can be set in the configuration files,
   including parameters bind-address and skip-networking:
# /usr/libexec/mysqld --help --verbose

Firewall:

# firewall-cmd --permanent --add-service=mysql
# firewall-cmd --reload

SELinux:

Default data directory is /var/lib/mysql, which can be seen in the startup
messages for the mariadb systemd service.  SELinux type mysqld_db_t

Backup:

# mysqldump -u root -p [somedbname | --all-databases ] > /backups/mybackup.dump

Restore:

Drop the affected databases and create them without content.  Then:
# mysql -u root -p somedbname < /backups/mybackup.dump

When running a "CREATE USER" SQL command, remember to enclose the user's
password (like any string) within single quotes:
> create user 'lisa'@'localhost' identified by 'password';

After running GRANT or REVOKE commands:
FLUSH PRIVILEGES;

#####

Apache:

# yum groupinstall "Web Server"
   (this includes httpd, httpd-manual, mod_ssl, and crypto-utils, among other
    packages)
# yum install php php-mysql mod_wsgi
   (this installs mod_php and mod_wsgi for native PHP and Python script support,
    respectively, plus the PHP interface to MariaDB)

# man httpd_selinux

Set up a _default_:80 VirtualHost entry in /etc/httpd/conf.d/00-default.conf
   with a DocumentRoot directive to catch all accesses that are not directed
   to a specific virtual host (including references to the system hostname if
   they are not caught by a more specific virtual host reference)

The Apache manual is available at http://<hostname>/manual

Important links in the manual:
   VirtualHost directive:
      Users' Guide -> Virtual Hosts -> Configuration directives -> VirtualHost
   Basic authentication directives:
      How-To / Tutorials -> Authentication and Authorization
         http://server1.example.com/manual/howto/auth.html

The -c option to htpasswd reinitializes (empties) the file before adding a
user.  Only use the -c option the first time htpasswd is run.

elinks cannot access http(s) content that requires authentication

Use curl for non-interactive fetches.
curl --insecure accepts self-signed certs for TLS-protected content.
curl -u <username:password> to access user/password-protected content.

_default_ virtual hosts should be defined in files that come alphabetically
before any other files in /etc/httpd/conf.d

A VirtualHost requires, at minimum, two sections in a configuration file:

<Directory /some/dir>
  Require all granted
  AllowOverride None
</Directory>

<VirtualHost some.hostname.com:80>
  DocumentRoot /www/my/sitedir
  ServerName some.hostname.com
</VirtualHost>

Other directives that may need to be added to the VirtualHost section are:
  ServerAlias some www.hostname.com *.internal.hostname.com
  ErrorLog logs/some-errorlog
  CustomLog logs/some-accesslog combined

If it is necessary to configure multiple TLS-protected virtual hosts, the
configuration file for each should begin as a copy of
/etc/httpd/conf.d/ssl.conf with all lines outside of
<VirtualHost></VirtualHost> removed.

Do not use a passphrase for the TLS private key so that Apache can start
without user interaction to decrypt it; on exam, the public/private keypair
will be provided with wget (but restorecon them afterward to make them cert_t)

To redirect http to https, add the following lines to a VirtualHost that
responds to port 80:

	RewriteEngine on
	RewriteRule ^(/.*)$ https://%{HTTP_HOST}$1 [redirect=301]

To redirect only references to a particular server name from http to https, add
a ServerName directive to the same VirtualHost definition that contains the
rewrite rules.  For example:

	ServerName secure.example.com

and make sure that there is another default VirtualHost for port 80 that does
not redirect to https.

Apache logs are in /var/log/httpd

#####

Firewall:

Many examples in man pages firewall-cmd(1) and firewalld.richlanguage(5).
Also use firewall-cmd --help for complete syntax.

Know how to enable IP forwarding directly by creating a .conf file in
/etc/sysctl.d with the line:

net.ipv4.ip_forward = 1

Know how to block ping (ICMP echo) packets.

Possible solutions include creating a .conf file in /etc/sysctl.d with the
line:

net.ipv4.icmp_echo_ignore_all = 1

followed by:

# sysctl -p /etc/sysctl.d/somename.conf

or

# systemctl reboot

OR

From the firewalld.richlanguage(5) man page in the icmp-block section:
# firewall-cmd --permament --add-rich-rule='rule icmp-block name="echo-request"'
# firewall-cmd --reload

Note that the firewall-cmd solution will not block local ping packets, only
those originating on a remote host.  However, it has the advantage of being
more flexible, allowing (for example) pings to be blocked only on specific
network interfaces after they have been assigned to zones.

Rich rules are mainly needed when limiting the scope of a rule to a particular
source address that isn't already matched (implicitly with --add-interface or
explicitly with --add-source) by a zone's configuration, for logging, or for
rate limiting.

If a rich rule and basic rule both refer to the same service (like http),
remove the one that isn't needed in order to ensure that the preferred rule is
the one applied.

Virtual machines on the exame are not likely to be multi-homed (multiple
network interfaces).  However, IP masquerading must still be enabled for port
forwarding to work, even if traffic is being forwarded between hosts on the
same subnet.

#####

NFS:

Server:
# yum group install "File and Storage Server"

Client:
# yum group install "Network File System Client"

Server-side firewall services that should be opened include:
nfs
Note: mountd rpc-bind could be opened but should not be if they are not required

Server-side systemd services:
nfs-server
nfs-server-secure (for Kerberized NFS)
Note: rpcbind may also be enabled during package installation

Client-side systemd services:
nfs-secure (for Kerberized NFS)
Note: rpcbind may also be enabled during package installation

# exportfs -rv

Without the use of the export option "no_root_squash" on the server, root on
the client is mapped to the nfsnobody user for filesystem access.  To allow
nfsnobody to write to the filesystem, simply do the following on the server:

# chown nfsnobody:nfsnobody /myshare

On RHEL 7.0, it should not be necessary to set the SELinux context of an NFS
share to nfs_t in order to share it.  By default, the client will see its
SELinux type as nfs_t, however.

If an NFS share needs to be used by services other than NFS, set its SELinux
context to public_content_t or public_content_rw_t via the -o context mount
option on the client side or with NFS version 4.2 and semanage fcontext /
restorecon on the NFS server side.

For NFS version 4.2:

Server, in /etc/sysconfig/nfs:
RPCNFSDARGS="-V 4.2"

Client, in /etc/fstab:
Include mount option v4.2

#####

DNS with unbound:

Make the following changes to /etc/unbound/unbound.conf:

(Memorize these, as there is no simple reference available on the exam system)

interface: 0.0.0.0
access-control: 192.168.4.0/24 allow
domain-insecure=example.com
forward-zone:
	name: "."
	forward-addr: 192.168.4.200

# firewall-cmd --permanent --add-service=dns
# firewall-cmd --reload

#####

Email null client with postfix

# postconf -e 'inet_interfaces=loopback-only'
# postconf -e 'mynetworks=127.0.0.0/8 [::1]/128'
   (this line is not in the /usr/share/doc document listed below)
# postconf -e 'local_transport=error: local delivery disabled'
   (this line is not in the /usr/share/doc document listed below)
# postconf -e 'mydestination='
# postconf -e 'myorigin=example.com'
# postconf -e 'relayhost=[server1.example.com]'
# systemctl reload postfix

Example configuration:
less /usr/share/doc/postfix-2.10.1/README_FILES/STANDARD_CONFIGURATION_README ("Postfix on a null client")

Documentation for each setting in main.cf:
# man 5 postconf

Log is /var/log/maillog

Show outgoing mail queue:
# postqueue -p 

#####

Samba

Users whose credentials will be used to mount or otherwise interact with a
Samba share must exist in both the Samba user database (smbpasswd -a
<username>) and the Linux user account list (useradd <username>).

A "Samba-only user account" is one with no Linux password explicitly set (which
is the default behavior of useradd), a shell of /sbin/nologin, and a Samba user
account (smbpasswd -a <username>) with a password.

The server-side SELinux type for Samba shares that don't need to be used by
other services should be samba_share_t.  This type is not documented in the
smbd_selinux man page, but it is mentioned in the comments in
/etc/samba/smb.conf.

By default, any Samba user can connect to a share.  Use the "valid users"
variable to limit which users and groups (e.g. user1, @salesgroup) can connect.

By default, a Samba share is shared with "read only = yes".  If the "write
list" variable is set to a list of user and/or Linux groups (@groupname), then
those users and group members can write to the share even if "read only" is set
to yes.  If "writable = yes" is set, then ALL authenticated Samba users can
write to the share.  Note, however, that in all cases, writes are only allowed
if Linux permissions *also* allow write access.

References:
man smb.conf 
Examples and explanatory comments in /etc/samba/smb.conf

List Samba users:
# pdbedit -L

A Samba share is referred to on the client as //servername/sharename, e.g.
//server1.example.com/mysambashare

Use "multiuser,sec=ntlmssp" as mount options for multiuser cifs mounts, along
with a mount option for user= or credentials= typically using a Samba account
with minimal privileges on the filesystem (the default read-only privileges,
for example).

After mounting the filesystem as multiuser, su - to a Samba user, run
cifscreds <servername>, and test access.

An example of the syntax of a Samba credentials file is:
# cat /root/mycredsfile
username=smbnobody
password=password

which assumes that there is such a Linux user account and Samba user account.

#####

IPv6

Do not use nmtui for IPv6 on the exam; it will segfault and remove the existing
connection configuration.  Use nmcli instead.

#####

Time synchronization

Note that a time synchronization service (ntpd or chronyd) may already be
running on the exam systems.

For NTP peering, don't forget to persistently open the "ntp" service in the
firewall.

Perform any time synchronization tasks before any tasks that rely on Kerberos
features (like Kerberized NFS) or MariaDB databases.

#####

Group collaboration

If a task states that "group collaboration" must be set for a directory, this
probably means setting group ownership, group write bit, setgid bit, and
possibly also a recursive group rwX ACL and recursive default group rwx ACL.
Make sure the mask (rwx) allows group write permissions as well.
