General tips:

Before exam:

Review https://www.lisenet.com/2016/passed-rhce-on-rhel-7/

During exam:

Remember how to break into a system using rd.break, remount, chroot, and
touch /.autorelabel

Remember how to boot into a debugging mode with systemd.unit=emergency.target
or rescue.target on the kernel command line, or enable the debug-shell service
and reboot to get a root shell on tty9 during boot.

Expect to have to configure a persistent static route to access VMs.
   It may be necessary to create a static route in, e.g.,
   /etc/sysconfig/network-scripts/route-eth0, as:
      10.0.0.0/8 via 192.168.4.2 dev eth0
   or through nmcli, as:
      nmcli con mod system-eth0 ipv4.addresses "192.168.4.10/8 192.168.4.2"
      nmcli con mod system-eth0 ipv4.method manual
   where 192.168.4.2 is the gateway.
   followed by "systemctl restart network"
   Some exam candidates report no gateway or DNS server information provided.
       In this case, is the IPA server both?
Use ssh to access VMs rather than working on console to aid in copy/paste
   Keep multiple ssh sessions per VM in case a command inadvertently prevents
      new ssh sessions from being opened.
Run semanage fcontext and restorecon when necessary, including on any files
   that are copied to a server from an external source (such as TLS keys
   or Kerberos keytab files).
Ensure firewall ports are permanently opened.
Consider using --timeout=<secs> with firewall-cmd to revert potentially
   dangerous temporary (no --permanent) changes automatically in case they
   cause a problem; or run firewall-cmd commands on the console instead of in
   ssh sessions.
Ensure services are started and enabled and verify that they start at boot.
# yum install setroubleshoot-server
    provides sealert command to explain SELinux AVC denial messages in
    /var/log/messages and /var/log/audit/audit.log;
    To find them:  grep sealert /var/log/messages
                   grep AVC /var/log/audit/audit.log

Service-specific access control is generally preferred over firewalld access
control where possible.

If necessary to determine proper SELinux contexts for targets like files or
ports:
# yum whatprovides sepolicy
(The package is policycoreutils-devel)
# yum install policycoreutils-devel
# sepolicy manpage -a -p /usr/share/man/man8
# mandb
# man -k _selinux | grep <some_service_like_ftpd>

# yum install bash-completion
Remember to use _netdev in /etc/fstab for network storage devices/filesystems
   (NFS, SMB, iSCSI)

#####

iSCSI:

Target packages:
# yum group install "File and Storage Server"
   (installs targetcli and other packages)
Target service:
   target.service (NOT targetd.service)
   IMPORTANT:  Start and enable target.service immediately after finishing
      targetcli configuration, or better yet before running targetcli.

Initiator packages:
# yum group install "Network File System Client"
   (installs iscsi-initiator-utils and other packages)
Initiator services:
   iscsid.service
   iscsi.service

References:
   Use tab completion in targetcli (man page also has limited info)
   iscsiadm man page for discoverydb and login syntax

#####

Kerberos:

Based on the contents of the RH134/RH254 courses, the only steps needed to
configure Kerberos on the EX300 exam may be to install the "Directory Client"
package group, set DNS client resolution with nmcli, run "authconfig-gtk /
authconfig-tui" or "ipa-client-install --mkhomedir
[--domain=somedomain.example.com] [--no-ntp]", ensure that the sssd service is
enabled and started.  If authconfig-tui must be used, they should give you a
keytab file to copy into place (/etc/krb5.keytab) for your client VMs

According to Sander van Vugt's crash course notes, Kerberized login is likely
to be set up already, and the only step necessary to obtain additional Kerberos
credentials will be to copy the specified /etc/krb5.keytab file into place
for each VM.  Run "klist -k" to verify that credentials are loaded.

Enter the following command to verify that Kerberos user authentication is
working:
# kinit admin  (enter the password of the "admin" user on the Kerberos server)

#####

Network teaming:

Link aggregation on the exam can be done either with bonding or teaming, but
teaming is recommended.

Examples of nmcli syntax for teaming are in nmcli-examples(5)
Examples of runner configurations in JSON syntax are in
   /usr/share/doc/teamd-1.9/example_ifcfgs
The IP address for a team interface must be added with nmcli before the
   method is set to manual.
teamnl is the command to modify a team's configuration options other than those
   that are managed by nmcli.

Order of steps for configuring a new team connection with nmcli commands:
0. Make sure devices that are to be used as team slaves do not have an existing
   configuration.  If they do, disconnect them and remove their configs.
1. Create the team interface.
2. Assign static IP address(es) if appropriate.
3. Set IPv4 method to manual if static IPv4 addresses are being used.
4. Assign network devices (what teamd calls "ports") to the team interface.
5. Bring up the team interface.
6. Bring up the team interface's "ports".

Examples of steps 1 and 4 are documented in nmcli-examples(5).

#####

MariaDB:

# yum groupinstall mariadb mariadb-client

#####

Apache:

# yum groupinstall "Web Server"
   (this includes httpd, httpd-manual, mod_ssl, and crypto-utils, among other
    packages)
# yum install php php-mysql mod_wsgi
   (this installs mod_php and mod_wsgi for native PHP and Python script support,
    respectively, plus the PHP interface to MariaDB)

# man httpd_selinux

Set up a _default_:80 VirtualHost entry in /etc/httpd/conf.d/00-default.conf
   with a DocumentRoot directive to catch all accesses that are not directed
   to a specific virtual host (including references to the system hostname if
   they are not caught by a more specific virtual host reference)

The Apache manual is available at http://<hostname>/manual

Important links in the manual:
   VirtualHost directive:
      Users' Guide -> Virtual Hosts -> Configuration directives -> VirtualHost
   Basic authentication directives:
      How-To / Tutorials -> Authentication and Authorization
         http://server1.example.com/manual/howto/auth.html

The -c option to htpasswd reinitializes (empties) the file before adding a
user.  Only use the -c option the first time htpasswd is run.

elinks cannot access http(s) content that requires authentication

Use curl for non-interactive fetches.
curl --insecure accepts self-signed certs for TLS-protected content.
curl -u <username:password> to access user/password-protected content.

_default_ virtual hosts should be defined in files that come alphabetically
before any other files in /etc/httpd/conf.d

A VirtualHost requires, at minimum, two sections in a configuration file:

<Directory /some/dir>
  Require all granted
  AllowOverride None
</Directory>

<VirtualHost some.hostname.com:80>
  DocumentRoot /www/my/sitedir
  ServerName some.hostname.com
</VirtualHost>

Other directives that may need to be added to the VirtualHost section are:
  ServerAlias some www.hostname.com *.internal.hostname.com
  ErrorLog logs/some-errorlog
  CustomLog logs/some-accesslog combined

If it is necessary to configure multiple TLS-protected virtual hosts, the
configuration file for each should begin as a copy of
/etc/httpd/conf.d/ssl.conf with all lines outside of
<VirtualHost></VirtualHost> removed.

Do not use a passphrase for the TLS private key so that Apache can start
without user interaction to decrypt it; on exam, the public/private keypair
will be provided with wget (but restorecon them afterward to make them cert_t)

To redirect http to https, add the following lines to a VirtualHost that
responds to port 80:

	RewriteEngine on
	RewriteRule ^(/.*)$ https://%{HTTP_HOST}$1 [redirect=301]

To redirect only references to a particular server name from http to https, add
a ServerName directive to the same VirtualHost definition that contains the
rewrite rules.  For example:

	ServerName secure.example.com

and make sure that there is another default VirtualHost for port 80 that does
not redirect to https.

Apache logs are in /var/log/httpd

#####

Firewall:

Many examples in man pages firewall-cmd(1) and firewalld.richlanguage(5).
Also use firewall-cmd --help for complete syntax.

Know how to enable IP forwarding directly by creating a .conf file in
/etc/sysctl.d with the line:

net.ipv4.ip_forward = 1

Know how to block ping (ICMP echo) packets.

Possible solutions include creating a .conf file in /etc/sysctl.d with the
line:

net.ipv4.icmp_echo_ignore_all = 1

followed by:

# sysctl -p /etc/sysctl.d/somename.conf

or

# systemctl reboot

OR

From the firewalld.richlanguage(5) man page in the icmp-block section:
# firewall-cmd --permament --add-rich-rule='rule icmp-block name="echo-request"'
# firewall-cmd --reload

Note that the firewall-cmd solution will not block local ping packets, only
those originating on a remote host.  However, it has the advantage of being
more flexible, allowing (for example) pings to be blocked only on specific
network interfaces after they have been assigned to zones.

Rich rules are mainly needed when limiting the scope of a rule to a particular
source address that isn't already matched (implicitly with --add-interface or
explicitly with --add-source) by a zone's configuration, for logging, or for
rate limiting.

If a rich rule and basic rule both refer to the same service (like http),
remove the one that isn't needed in order to ensure that the preferred rule is
the one applied.

Virtual machines on the exame are not likely to be multi-homed (multiple
network interfaces).  However, IP masquerading must still be enabled for port
forwarding to work, even if traffic is being forwarded between hosts on the
same subnet.

#####

NFS:

Server-side firewall services that should be opened include:
nfs mountd rpc-bind

#####

DNS with unbound:

Make the following changes to /etc/unbound/unbound.conf:

interface: 0.0.0.0
access-control: 192.168.4.0/24 allow
domain-insecure=example.com
forward-zone:
	name: "."
	forward-addr: 192.168.4.200

# firewall-cmd --permanent --add-service=dns
# firewall-cmd --reload

#####

Email null client with postfix

# postconf -e 'relayhost=[server1.example.com]'
# postconf -e 'inet_interfaces=loopback-only'
# postconf -e 'mydestination='
# systemctl reload postfix

Reference: less /usr/share/doc/postfix-2.10.1/README_FILES/STANDARD_CONFIGURATION_README ("Postfix on a null client")

#####

Samba

Users whose credentials will be used to mount or otherwise interact with a
Samba share must exist in both the Samba user database (smbpasswd -a
<username>) and the Linux user account list (useradd <username>).

#####

IPv6

Do not use nmtui for IPv6 on the exam; it will segfault and remove the existing
connection configuration.  Use nmcli instead.
