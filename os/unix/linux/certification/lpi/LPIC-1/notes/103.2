Process text streams using filters

cat - file1 : concatenate standard input and file1
cat -E (or --show-ends) displays a $ character at the end of every line of input
cat -n (or --number) prepends a line number to every line
cat -b (or --number-nonblank) prepends a line number to every nonblank line
cat -s (or --squeeze-blank) eliminates duplicated sequential blank lines
    (squeezes them down to a single blank line)
cat -T (or --show-tabs) displays tab characters as ^I
cat -v (or --show-nonprinting) shows nonprinting chars with ^ and M- notations
cat -A or --show-all is equivalent to cat -vET

tac reverses the order of input lines (last line first)
rev reverses the text within each input line

join performs a database-like join operation on a specified column in two files
   (exactly two, not more)
   join [-1 column#] [-2 column#] file1 file2
   join [-j column#] file1 file2   # when the same column in both files will be
                                   # the join column
   join -t specifies a field separator (default is space)
   join -i ignores case when matching text in column selected for the join
   The column on which the join is performed must match exactly in the two
      input files, line for line, if they do not appear in sort order,
      or else entries must appear in the same sort order in each file if not
      every entry has a match in both files
      If the entries in the join column are not sorted in both files, any
         entry in the join column that does not have a matching value on
         the same line in both files will cause join to abort
         and generate the error message:
            join:filename:line#: is not sorted ....
   Default output is: 
       join column field, all other fields in file1, all other fields in file2
   Alternatively, output fields can be specified in a comma-separated list as
       -o FILENUM.FIELD,FILENUM.FIELD, ...    e.g. 1.1,1.3,2.3
       The join column does not necessarily have to be included in the output
           fields.

paste merges files line by line, separating the line contents from each file
    into tab-separated columns
paste counts its file arguments to determine the number of columns to use on
   each line
When paste takes its input in whole or in part from stdin, each - argument is
   treated as an "input file" from stdin, causing a single word to be read
   from stdin before reading from the next file (if other file arguments 
   follow the -) or next line (if the - is the final input specifier argument)
Multiple - arguments can be passed to paste, possibly intermixed with named
   file arguments, to control the order in which input words are read
Example:

$ cat file1
ABC DEF
GHI JKL
MNO
$ cat file2
abc
def
ghi
$ cat file1 | paste - file2 -  # 1st and 3rd cols are stdin; 2nd is file2
ABC DEF	abc	GHI JKL
MNO	def	
ghi

expand -t # or --tabs=#  expands tabs to spaces assuming tab stops
    every # characters (default 8)
unexpand -t # or --tabs=#   converts sequences of two or more spaces to tabs
    assuming tab stops every characters (default 8)
    Not all spaces will necessarily be replaced with a tab.  In situations
    where a single space could be replaced with a tab, the space will be left
    as is and not replaced.  By default, only leading sequences of spaces on a
    line are converted to tabs.
unexpand -a    converts all sequences of two or more spaces on each line to
    tabs, not just leading sequences of spaces.

od displays output in order of increasing byte address in groups of
   selected word size, in octal, with octal file offsets (addresses)
od by default will display output as 16-bit words, with each word presented in
   little-endian or big-endian byte order depending on the architecture of
   the machine
od -t format_specifier
od -X or -t x4 : display 4-byte words in hex
od -D or -t d4 : display 4-byte words in decimal
Example:
   text1 contains the string "abcd"
   little-endian machine:
   od -x text1 shows contents as 6261 6463 because on little-endian arch,
       least significant byte is placed in the lowest (first) byte address
       in each word (so read each word right to left)
   big-endian machine:
   od -x text1 shows contents as 6162 6364 because on big-endian arch,
       most significant byte is placed in the lowest (first) byte address
       in each word (so read each word left to right)
   To avoid this complication in the output display, use:
       od -t x1    # displays output in hex, grouped by word size of 1 byte
       od -t x1 text1    # would display 61 62 63 64
   Or use dd conv=swab | od ....
To suppress display of offsets (file addresses), use -A n   (address none)
od -c or -t c  # displays output as ASCII characters, with escapes \ for
               # special chars
od -a or -t a  # displays output as named characters, like nl for newline,
               # sp for space,  and ht for horizontal tab
Format specifiers may be accumulated on the command line to show each character
   in multiple formats (one format per output line).

An alternative to od is hexdump.
hexdump supports different formatting options like -C to mix hex and ASCII
   side by side in columns, like old DOS hex dump utilities.

sort -o or --output=somefile : send output to somefile
     -f or --ignore-case:  ignore case
     -M or --month-sort:  sort by three letter month abbreviation
     -V or --version-sort:  sort by software version string
     -n or --numeric-sort:  sort numerically
     -r or --reverse:  sort in reverse order
     -t or --field-separator=X:  separate input fields by char X rather than
        by blanks
     -s or --stable: do not sort by any fields that are not specified or implied
     -k or --key=field_start[.m][,field_end[.n]]
        Sort from field_start to field_end, inclusive
        At least 9 key fields can be specified per POSIX,
           including multiple field ranges within a line
        Key fields are applied left to right in command line order
        Fields are numbered starting from 1
        If field2 is omitted, sort is from field1 to end of line
        Position within a field can be selected with field1.m, field2.n
           (m>=1, n>=0; n==0 means last character of field)
     Leading blanks are included in key field unless -b is specified
     Modifiers (like "b" to ignore leading blanks or "n" for numeric sort) can
        be appended to each field specifier independently, e.g. : sort -k2b -k3n
     Old style key syntax is still available when _POSIX2_VERSION=199209 is
        set in environment:
        +field_start -field_end
        With old style syntax:
            Fields are numbered starting from 0 (so +1 is second field)
            Sort field selection ends BEFORE the beginning of field_end
        One sort specification in old syntax has no equivalent in -k syntax:
            +X -Y.0b
            This means "end the key selection at the last leading blank
                in the Y+1st field"
            There is no equivalent in k-notation because k-notation has
               no way to specify "the last leading blank" of a field
     Sort ordering rules depend on value of LC_COLLATE (locale setting)
        LC_COLLATE=C will sort by ASCII character value (capital letters first)
        LC_COLLATE=[some UTF value] will sort alphabetically
        GNU recommends setting LC_ALL to avoid inconsistencies between LC vars
        Relative ordering of blanks vs. alphanumeric charaters varies by locale

split [OPTION] [INPUT [PREFIX]]:  INPUT is filename or - (default STDIN)
                                  If INPUT is provided, optional PREFIX gives
                                  prefix used for split filenames; default x,
                                  yielding filenames xaa, xab, ...
   -b or --bytes=size:  split into files of size# bytes
       size parameter can inlude a trailing b/B (512 byte blocks),
       k/K (kilobytes), m/M (megabytes), g/G (gigabytes), and so on
   -C=size or --line-bytes=size:  split by size# bytes or less, but not within
                                  a line unless a line exceeds size# bytes
   -l or --lines=size:  split into files of no more than size# lines each
                        default if no options at all are specified is "-l 1000"

tr [options] SET1 [SET2]
    tr always takes input from STDIN, not filenames (use "< filename" if needed)
    SET can be group of chars or range X-Y
    If SET2 is shorter than SET1, translate remaining chars in SET1 to last
       available char in SET2
    -t or --truncate:  truncate SET1 to size of SET2
    -d SET1:  delete chars in SET1
    -s or --squeeze-repeats : replace sequences of duplicate characters with a
        single occurrence of that character
    [:alnum:]:  all numbers and letters
    [:alpha:]:  all letters
    [:upper:]:  all upper case letters
    [:lower:]:  all lower case letters 
    [:digit:]:  all digits
    Other shortcuts are also available, like [:blank:] and [:white:]

uniq requires sorted input
uniq -d or --repeated : display only duplicated lines (once per set)
uniq -u or --unique : display only unique lines
uniq -c or --count : prefix lines by number of occurrences
uniq -f or --skip-fields=N : ignore the first N fields when checking for dups

fmt reformats paragraphs (separated by two or more newlines) into widths of
    no greater than a specified number of characters (default 75)
    -w # or --width=#   sets maximum line width to # characters
    fmt will not split a word, no matter how long

nl default behavior is like that of "cat -b":  number non-blank lines
nl -b style or --body-numbering=style : format main body of doc according to
   style
nl -h style or --header-numbering=style : format header according to style
nl -f style or --footer-numbering=style : format footer according to style
nl -d=code or --seection-delimiter=code : use two-char code to separate pages
   Default two-char code is \: and is interpreted within the doc as follows:
   \:\:\:   introduces page header
   \:\:     introduces page body
   \:       introduces page footer
   If there are no section headers in the doc, all of it is considered body
nl -p or --no-renumber : line number count does not reset with each new page
nl -n FORMAT or --number-format=FORMAT : print line numbers according to FORMAT
   FORMAT is ln (left justified, no leading zeros)
             rn (right justified, no leading zeros)
             rz (right justified, leading zeros)
nl style codes:
   t: number non-empty lines (default behavior)
   a: number all lines
   n: do not print line numbers, but still indent/format
   pREGEXP: number only lines that match REGEXP
nl -i #inc : increment line numbers by integer #inc (default 1)

pr formats text for printing, 80 characters per line
   pr adds headers, footers, and page breaks.
   Like fmt, pr will not split a word, no matter how long.
   Unlike fmt, pr does not reflow paragraphs.
pr -#columns or --columns=#columns : display output in #columns
   When this option is specified, a line that does not fit within
   the column width is truncated.
pr -d : double-space output (add a newline after every newline)
pr -F or -f or --form-feed : Output form feed between pages instead of a fixed
   number of blank lines
pr -l #lines or --length=#lines : sets page length in lines (default 66)
pr -h sometext or --header=sometext : Replace header with sometext
   Default header contains date and time, filename, and page number
pr -t or --omit-header : Do not output any headers
pr -o #chars or --indent=#chars : indent left margin by #chars (default 0)
pr -w #chars or --width=#chars : set page width of multi-column output
   (default 72)
pr -m : merge input sources into multiple columns like "paste ..... | pr"

head and tail display a header (==> filename <==) for each file when passed
    multiple files as arguments on the command line.

head/tail -c #bytes or --bytes=#bytes : display #bytes instead of default 10
   lines
head/tail -n #lines of --lines=#lines : display #lines instead of default 10
   lines

head -n -#lines (minus #lines) means display all but the LAST #lines
   (trim from bottom)
tail -n +#lines (plus #lines) means display starting with line number #lines
   (trim from top)
This also works with the -c #bytes syntax.

tail -f (or --follow) with --pid=PID terminates tail after PID dies
tail -s #secs or --sleep-interval=#secs : refreshes tail -f every #secs seconds
    (default 1 second)

head and tail can be combined to display only a section of the middle of a
file, as in:
head -n 15 filename | tail -n 5  # displays lines 11 through 15 of a file
Equivalent to:
sed '1,10d' filename | sed '6,$d'
sed -n '11,15p' filename

In less, typing g followed by a line number will move to that line;
   typing h will bring up the help pages for the "less" command

cut -b or --bytes=list : display specified bytes from list
cut -c or --characters=list : display specified characters from list
cut -f or --fields=list
list can be
   a single number x
   a closed range x-y (where x >= y)
   an open range
      -x : beginning through x
      y- : y through end
   combinations of any of the above separated by commas (result is union of
      all specified fields, in same order of appearance as in the input)
cut -d --delim=somechar or --delimiter=somechar : specify field separator
   (default is tab)
By default, cut will also display lines not containing the delimiter character,
   regardless of list specifiers
cut -s or --only-delimited : omit lines that do not contain the delimiter

When the cut delimiter character occurs more than once in immediate
   succession, the first occurrence is treated as a delimiter and the
   remaining identical successive characters are each treated as a field.
Example:
echo "a  b   c" | cut -d " " -f 3   # displays b
echo "a  b   c" | cut -d " " -f 4   # displays a space character
                                    # (actually the second space after the "b")
echo "a  b   c" | cut -d " " -f 6   # displays c

cut --output-delimiter=XYZ : use string XYZ as output delimiter

wc -l or --lines
wc -w or --words
wc -c or --bytes
wc -m or --chars
wc -L or --max-line-length : display length of longest line

With multiple file args, wc shows counts for each file plus a total

sed commands can be grouped in curly braces { } for a particular address
   specifier; this can be useful when you wish to run multiple sed commands
   for just one address specifier out of several
sed scripts can also be built up in stages with multiple address specifier /
   action pairs using -e on the command line before each pair, or separated
   by semicolons as long as the sed commands collectively are enclosed in
   quotes to avoid interpretation of the semicolons by the shell.
sed -f somefile : run somefile as a sed script
sed -n : Suppress printing of lines that are not explicitly selected
   for printing
To select the complement of an address range, add a trailing ! to the
   address specifier:
   sed -n 1,3p    # print only lines 1 through 3
   sed -n 1,3!p   # print all lines except 1 through 3
To select alternate lines, use a step size:
   sed -n 1~2p    # print every other line, starting with the first
                  # (step size of 2 lines)
To select the complement of a regex match, append ! to the trailing regex
   delimiter:
   sed -n '/^#/!p'   # print only lines that do not begin with '#' character
To filter lines from selected stanzas where all stanzas are delimited by a blank
   line:
   sed -n '/some_marker_at_top_of_stanza/,/^$/ p' | egrep 'stuff1|stuff2'

sed commands:
= : print current line number followed by a newline and the pattern space
a\text : append text
i\text : insert text
r somefile : read text from somefile
c\text : replace text
s/regexp/replacement : replace regexp with replacement text once per line
s/regexp/replacement/g : replace regexp with replacement text every occurence
w somefile : write current pattern space to somefile
q : quit after printing the current pattern space
Q : quit without printing current pattern space

In substitution replacement strings:
   & represents the entire match, not the entire line on which the match
      occurred
   \1 through \9 represents the nth matched subexpression in parentheses ( )

In basic regular expression mode (the default), parentheses for sed
   subexpressions must be escapted by \ even if the entire sed script is
   enclosed in single quotes or contained in a script file
sed -r : Run in extended regular expression mode (parentheses for subexpressions   do not need to be escaped)
