The Linux command line

In order for # to introduce a comment after the beginning of a line, it
   must be preceded by whitespace or escaped or quoted
   echo hel#lo     # hel#lo is not a comment, but this text is

echo -e enables interpretation of certain backslashed characters:
\a alert bell
\b backspace
\c suppress trailing newline (like echo -n)
\f form feed
\n new line
\r carriage return
\t horizontal tab

To avoid having bash interpret the escape sequences itself (rather than passing
them on to a command like echo), the must be placed in quoted strings ("\b") or
else doubly-escaped (\\b rather than \b)

Shell variables can consist of letters, numbers, and underscores; not dashes

export makes a shell variable an environment variable, passed to child
	processes and visibile in the output of "env"

$PPID is parent process ID

$_ is automatically set to the final argument on the most recently executed
   command line.
   $_ is therefore often, but not necessarily, a filename.

Similarly, typing _ while in the shell's vi command mode inserts the last
    argument from the most recently run command (often a file or directory path)

Shell parameters (as opposed to variables) are read-only, like $$ and $?

env -i ignores (does not share) current environment variable settings before
   running subsqeuent commands on the same command line, if any, as in:
$ env -i somecommand  # somecommand will not inherit parent process environment
   But parent process still retains its environment and it can still be
   inherited as usual by subsequent child processes

env -u SOMEVAR somecommand  # unsets the variable SOMEVAR before running
                            # somecommand.

bash -l starts a login shell

set -u tells bash to treat undefined variables as an error rather than as
	empty; default behavior is +u, treat undefined variables as empty

$- contains all shell command line options that are set (like -i, -H, etc.)

Variables can be declared with the "declare" shell builtin
	declare -x exports their values to the environment

Review uname options

set -/+o history turns history on and off
History length in lines is determined by HISTSIZE (typically defaults to 500
	or 1000)
History from each session is written to ~/.bash_history only when that session
   ends.

bash uses syntax:  history 50, NOT history -50

history entries can be deleted invidually:  history -d N
The entire history in memory (but not disk) can be deleted with:  history -c

!! repeat last command
!N repeat command N
!string repeat last command STARTING with string
!?string? repeat last command CONTAINING string
!# refers to current command being entered, for subsequent edits, e.g. !#:1-3
   Example:  echo "Some string" !#:* !#:1-    # echoes the string 3x

sed-like editing is possible with colon, e.g.
$ echo "My foo proc is $$"
$ !?foo?:s/$$/$PPID/

Such editing is done on literal characters before shell interpretation, so in
the previous example, the literal string $$ would be replaced with the literal
string $PPID before being freshly interpreted as part of the new command

Typing a # character while in the shell's vi history command mode prepends #
to the entire command line, thus turning it into a comment but still placing it
into the shell's command history for future reference/recall.

type command (builtin) indicates type of command--alias, builtin, or path to it
type -a shows all matches to command name of all types; useful for revealing
   cases in which a builtin or alias and executable file have the same name

$OLDPWD contains previous pwd
$CDPATH contains an optional list of paths to be searched when a relative path
	is given to the cd command

"whatis word" searches the "NAME" field (man page title and one line
    description) in man pages for a complete word
    equivalent to man -f
"apropos string" searches the "NAME" field in man pages for a string
    equivalent to man -k
The "whatis" database is created by the "makewhatis" command
$ help somebuiltin    # gives help on a shell builtin command
$ help -m somebuiltin  # display help in pseudo-manpage format
See ~/computers/os/unix/help/help_reference for more details

bash configuration is performed in:
/etc/profile (login shell only)
/.bash_profile (login shell only)
/.bashrc (interactive non-login shell only)

Moving back a page in "less" can be done with Esc-V as well as Ctrl-B

/etc/man.config contains configuration information (such as paths) for man

man -P /program/name will use /program/name as the pager instead of "less"

man sections on Linux:
1:  Commands
2:  System calls
3:  Library functions
4:  Device files
5:  File formats
6:  Games
7:  Miscellaneous
8:  System administration commands
9:  Kernel functions
n:  New man pages
o:  Old man pages
l:  Local man pages

man -a somepage   # shows entries for all matching sections in the manual
man -t somepage   # format man page for printing (using troff macros)
