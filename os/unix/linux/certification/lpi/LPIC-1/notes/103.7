Search text files using regular expressions

Reference: regex(7)

The following characters are interpreted only when extended regular expressions
   are in use:  ? + | ( )
In basic regular expression mode, and when they are escaped in extended regular
   expression mode, they are matched literally.
Examples:
   grep '('       # bash sends '(' to grep, matches literal (
   grep -E '('    # bash sends '(' to grep; syntax error
                  # since grep -E interprets the ( and finds no matching )
   grep -E '\('   # bash sends '\(' to grep, matches literal (

Word boundaries:
\< : Match start of word
\> : Match end of word
Example:
   \<abc\>  matches " abc " or "\tabc\n" but not "dabce"

In a bracket expression [ ], all characters except ^ (at the beginning, for
   negation) and - (in a range) are interpreted literally, including \ . *
   Exceptions:  [.coll.] [=coll=] [:class:] all have special meanings.
   [.coll.] and [=coll=] are used to specify collation sequences and
      equivalencies for multi-character collation elements (such as might be
      used in non-English languages).
   [abc]* matches any string containing any or all of the characters a b c in
       any order or quantity, not just the same character repeated
Special cases for matching literal [ ] and - :
   [[abc] : match literal [ or a or b or c
   [-abc] : match literal - or a or b or c
   [[a-c-] : match literal [ or a or b or c or -
   [][\a-c-] : match literal ] or [ or \ or a or b or c or -

Character classes are enclosed in [: :] and include the following names:

alnum   digit   punct
alpha   graph   space
blank   lower   upper
cntrl   print   xdigit

[:blank:] matches space or tab
[:space:] matches any whitespace character

A precise bound can be set on a regular expression using { }, as in these
   examples:
   {2} or {2,2} : match exactly 2 of the preceding regex
   {2,} : match 2 or more of the preceding regex
   {1,5} : match between 1 and 5 of the preceding regex
   The integers in a bound can range from 0 to 255.

A back reference is expressed as \1 through \9 and matches the same sequence
   of characters matched by the nth parenthesized subexpression ( )
Example:  ([bc])\1   matches "bb" or "cc" but not "bc"

grep -G or --basic-regexp : use basic regular expressions (default)
grep -E or --extended-regexp: use extended regular expressions (equivalent to
   egrep)
grep -F or --fixed-strings : use fixed strings (equivalent to fgrep)

Normally, grep runs in POSIX mode (basic or extended) and does not interpret
   \t as a tab character.
To match a tab character in a grep regular expression:
   grep -P '\t'       # -P enables Perl regular expressions 
   grep '	'     # place a literal tab in the expression
Or use the ANSI C quoting feature of bash:
   grep $'\t'         # requires ANSI C quoting feature of bash

To grep for a string like -H that begins with a dash - :
   grep '\-H' filename
   grep -- -H filename

grep -c or --count : count number of matching lines (even if 0) in each file
grep -l or --files-with-matches : print only filenames with matches
   Each filename with a match is listed only once
grep -n : print line numbers of matching lines (as well as the matches
   themselves)
grep -f somefile or --file=somefile : takes pattern input from somefile
   instead of from the command line
grep -i or --ignore-case : case-insensitive search
rgrep or grep -r or --recursive : recurse through subdirectories
grep -o or --only-matching : print only matching text, not entire line that
   contains the match.  Each match is printed on a new line, even when there are
   multiple matches in a single line of input.
grep -w : match whole words
grep -A # : print # of lines after matching line
grep -B # : print # of lines before matching line
grep -C # : print # of lines before and after matching line
grep -e pattern1 -e pattern2 -e pattern3 ... : specify multiple search patterns
   while are logically OR'd so that the result is the union of matching lines

For notes on sed, see 103.2
