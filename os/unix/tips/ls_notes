Recursion with ls -R does not imply -a; to show hidden files, too, use -aR.

*****

Show actual file disk space usage, in default unit of blocks (equivalent to
du):
$ ls -s

Useful for showing sizes of sparse files like virtual machine disk images

Caution: -l, if specified, overrides -s regardless of the order of options on
the ls command line.

*****

Size units:

ls can show file sizes in bytes (default for -l), physically allocated blocks
on disk (default for -s), kibibytes (-k), human-friendly units (-h), or
arbitrary block size (--block-size=XXX) consisting of an integer number of
bytes or an integer multiple of a symbolic power of 1024 (K, M, G, etc.)--e.g.
10M, 1024K, etc.

The minimum size shown is 0 for empty files, 1 for any file of nonzero size.

*****

Displaying the full date, including the year, for all files:

By default, ls with the "long" option (-l) shows the hour and minute instead of
the year in the timestamp of a file if the timestamp is more than 6 months in
the past (GNU ls and Solaris ls), or more than 6 months in the past or future
(BSD ls).  To ensure that the year portion of the timestamp is always shown,
use the following options:

GNU ls:
$ ls --full-time
or
$ ls -l --time-style "<date_specifier>"
   where <date_specifier> can be one of several ISO or locale-specific options
   or a format specifier in the syntax used by the "date" command, e.g. "+%Y"

BSD ls:
$ ls -l -T
or
$ ls -l -D "<date_specifier>"
   where <date_specifier> is in the format used by strftime(3), i.e. the format
   used by the "date" command but without a leading "+" sign.

Note: The -D option is not available in macOS.

Solaris ls:
$ ls -e
or
$ ls -E
  The -E option includes the nanosecond precision timestamp and UTC hour offset

*****

Filename sort order:

Filename sort order is controlled by locale settings as well as options passed
to the ls command on the command line.  Traditional Unix ASCII sort order
places the dot "." character ahead of alphanumeric characters, causing dotfiles
by default to be listed before non-dotfiles.  In addition, ASCII sort order
sorts capital letters ahead of lower case letters.

Unicode sort orders can in some cases treat dotfile filenames as equivalent
lexicographically to filenames starting with the same character as the one
immediately following the leading dot.  This leads to filename sort orders such
as the one found in the following example:

$ locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8

$ ls -A1
bar
.foo
foo
.Foo
Foo
.qux
xyzzy

To force traditional ASCII sort order in GNU ls, set the LC_ALL locale variable to an appropriate value, such as "C.UTF-8" or "C":

$ LC_ALL=C.UTF-8 ls -A1

.Foo
.foo
.qux
Foo
bar
foo
xyzzy
