# Output of this portion of the script will be:
# 	a
#				b
#						c

cat <<EOF
	a
				b
						c
EOF

# Output of this portion of the script will be:
# a
# b
# c
# since <<- strips leading tabs from the here doc content lines
# and also allows the here doc terminating string (EOF in this example) to have
# leading tabs as well.

	cat <<-EOF
		a
					b
							c
	EOF

# Output of this portion of the script will be:
# 123
# abcBAR
# def
# since variable and command substitution is done and \<newline> is ignored

FOO=BAR
cat << EOF
`echo 123`
abc\
$FOO
def
EOF

# Output of this portion of the script will be:
# `echo 123`
# abc\
# $FOO
# def
# since quoting the here document termination string prevents interpretation
# of its contents (no variable or command substitution and \<newline> is
# preserved)

FOO=BAR
cat << "EOF"
`echo 123`
abc\
$FOO
def
EOF
