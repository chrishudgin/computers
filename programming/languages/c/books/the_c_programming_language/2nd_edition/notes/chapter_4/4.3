p. 73

"A C program consists of a set of external objects, which are either variables
or functions."

This statement is similar to a statement in section 4.1 that "a program is just
a set of definitions of variables and functions."

p. 73

External linkage means that, by default, external objects are linked to each
other by name across files within a program.  This behavior can be changed from
the default by adding the keyword "static" to the declaration of an external
variable or a function, which gives the declared object file scope instead of
global scope.

p. 76

Note that in the main function for the RPN calculator, if the divisor in a
division operation is 0.0, the zero value is removed from the stack and is not
replaced.  The dividend remains on the stack, however.

p. 77

In the stack implementation for this RPN calculator, the stack pointer
variable, sp, points to the next available stack position, not the topmost
occupied stack position, and the stack pointer is incremented when an element
is pushed.  These characteristics make the stack implementation the "empty
ascending" type.  As seen in the push and pop functions, when the stack pointer
sp == 0, the stack is empty, and if the stack is not empty, the stack pointer
is decremented before a value is read.

p. 77

The representation of the stack and stack position as external variables are
hidden from main by declaring (and defining) them after the definition of main
in the source file.

p. 78

Since static variables have not been discussed yet in the book, external
variables must be used for retaining values between function calls.
