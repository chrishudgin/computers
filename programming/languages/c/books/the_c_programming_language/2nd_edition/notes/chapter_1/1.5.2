p. 18

"You could instead write nc = nc+1 but ++nc is more concise and often more
efficient."

"++nc" could potentially be more efficient than "nc = nc + 1" when compiled
into assembly language if the compiler assembles "++nc" into an
increment-in-place (e.g. INC) instruction and "nc = nc + 1" into a sequence of
a load, add, and store instruction.  An increment instruction with an
optimizing compiler could even choose to increment the value of nc in a
register without writing back to main memory.  On the other hand, the
load-add-store instruction sequence would be necessary if nc were declared as
volatile, meaning its value would have to be fetched from memory external to
the CPU before modification.

p. 18

"It may be possible to cope with even bigger numbers by using a double (double
precision float)."

Using a variable of type "double" for nc in the character counting program, for
the case when the implementation represents a "double" variable as a 64-bit
IEEE 754 double precision floating point value, allows the counter to increment
to 2^53 before subsequent increments are lost due to the variable type's
precision limit (mantissa size).  2^53 is 9,007,199,254,740,992, or slightly
over 9 quadrillion.  In contrast, a 32-bit (signed) long with a two's
complement representation has a maximum positive integer value before
wraparound of 2^31 - 1, or 2,147,483,647 which is around 2 billion.  Using a
"double" instead of a "long" on a 32-bit machine can therefore provide more
than four million times as many precise positive integer counter values.

On a machine that implements the "long" type as a 64-bit integer, the maximum
representable positive integer of that type is 2^63 - 1, or
9,223,372,036,854,775,807, which is over 9 quintillion.  This is more than
1,000 times as large as the "double" type can represent while incrementing
without subsequent loss of precision, and more than 4 billion times as large as
the largest positive integer a 32-bit signed int can represent.
