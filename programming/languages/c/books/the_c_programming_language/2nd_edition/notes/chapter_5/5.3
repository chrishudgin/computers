p. 97

The reason that a pointer version of an operation will in general be faster
than a version that uses array subscripting, at least for iteration through an
array, is that accessing the data in an array element in memory requires
loading the base address of the array, multiplying the element number by the
element size, adding that quantity to the base address of the array, and
finally loading the data from the resulting address.  A compiler that does no
optimization must perform these calculations for each access of an array
element.  In contrast, the same data could be accessed using a pointer variable
by loading the array base address into the pointer variable one time, then for
each iteration simply adding or subtracting a constant (the array element size)
to the existing pointer value and dereferencing the result.  With address
auto-incrementing load/store instructions, accessing array elements iteratively
using a pointer can be done with only a single CPU instruction per data access
instead of the several instructions required when using array subscripting.

p. 99

Both a pointer variable and an array name may be used to access the i-th
element of an array simply by adding i.  That is, if a and pa are declared:

int a[10];
int *pa;

and pa is assigned to point to a (which by definition is &a[0]):

pa = a;

then the following expressions all have the same value:

a[i]
*(a + i)
*(pa + i)

p. 100

References to negative array indices like p[-1] and p[-2] only work if p points
to an array location whose index is at least as great as the absolute value of
the negative index given.  For example, p[-2] will access an array element that
is two elements before the element to which p currently points, but p must
point to array element 2 or higher before this is done.

This is legal:

int a[10];
int *p;

p = a + 2;  /* p == &a[2] */
p[-2] = 5;  /* *(p-2) = 5, *(&a[2 - 2]) = 5, *(&a[0]) = 5, a[0] = 5 */

But the following is NOT legal because at the time a[-2] is used, a contains
the address of a[0], and a-2 (== &a[-2]) therefore does not point to a valid
array element:

int a[10];
a[-2] = 5;
