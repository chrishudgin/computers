p. 104

Since the assignment operator = does not perform a string copy, an array of
char can only be initialized to contain a string literal once, in the
declaration section of a block.

This statement is legal:

char amessage[] = "some string";

but a subsequent statement like the following is not legal:

amessage = "2nd string";

However, as the book notes, the contents of the array can later be modified:

amessage[3] = 'b';
strcpy(amessage, "new string"); /* the string must be no longer than array */

In contrast, a char pointer declared to point to a string literal, like any
char pointer, regardless of whether it was initialized at declaration, can be
modified to point to a different char or string literal at any time.  However,
the literal string to which it pointed at initialization cannot be modified.

These statements are therefore legal in sequence:

char *pmessage = "some string";  /* initialized to point to string literal */
char *pm2;                       /* not initialized at time of declaration */

pmessage = "a different string"; /* now nothing points to "some string" */
pm2 = "another string";

But this statement is not legal if pmessage points to a string literal:

pmessage[3] = 'b';

p. 106

In the stack example near the end of this section, the stack is ascending (that
is, it grows upward), and the stack pointer p is presumed to point to the next
empty (available) location at the top of the stack.
