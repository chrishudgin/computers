"If the distinction between the terms 'statement' and 'expression' seems vague,
don't worry; we'll start talking about statements in the next chapter."

An expression may constitute a statement (if the expression is followed by a
semicolon), but a statement may contain other elements besides expressions, and
a statement need not contain an expression.

An expression becomes a statement if it is terminated by a semicolon.

Examples of "expression statements", where an expression statement is a
statement consisting of an optional expression:

a = 5;      /* assignment is an expression and has a value */
a = a + 3;  /* as above */
i;          /* a variable is an object; by itself, also an expression */
++i;        /* a variable with an operator is an expression */
;           /* the null statement, which contains no expression */

An example of a statement containing multiple expressions and statments as well
as non-expression elements (in this case, an "if / else " construction) is:

if (a > b)   /* start of selection statement with expression a > b */
    while (a != 0) { /* start of iteration statement with expression a != 0 */
        deletechar();  /* expression statement that is a function call */
        --a;  /* expression statement */
    } /* end of iteration statement and compound statement in braces */
else
    --i;      /* expression statement */
/* end of selection statement that started with "if" above */

An example of a statement that is not an expression and does not contain an
expression is a jump statement that uses goto:

goto bailout;

where bailout is a label and identifier but not an expression.  This is also
one example where an identifier is not a variable or constant.
