The first four integer or pointer arguments to a function are passed in
registers r0-r3.  Additional arguments if needed are passed on the stack.
Integer results are returned in register r0 (for a 32-bit value) or registers
r0 and r1 (for a 64-bit value).

Double-word non-floating-point arguments are passed in register pairs r0/r1 and
r2/r3, with the high-order portion (i.e. upper 32 bits) of the argument
occupying the higher-numbered register.  If r0 is used for a single-word
argument and the next argument is double-word, then the r2/r3 pair is used for
it (never r1/r2).

printf() will use r2/r3 for its second argument (the first being the address of
the format string in r0) if the second argument is of type double precision
floating point, and subsequent arguments will be read from the stack
(regardless of their types).

Otherwise, floating point arguments are passed in the floating point registers
s0-31 (single precision) or d0-d15 (double precision), where d0-15 consist of
s0-s1 (d0), s2-s3 (d1), ..., s30-s31 (d15).  Floating point results are
returned in s0 (single precision) or d0 (double precision).

If a structure is passed as a function argument, as many of its elements as
possible are passed by value in the registers r0-r3, with any additional
elements passed by value on the stack.  Both integral and floating point
elements of the structure are passed using this convention.

Reference: http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042f/IHI0042F_aapcs.pdf

Aggregates (structures and unions) as return values are a special case.  The
caller function allocates the memory for the aggregate in its own stack frame
and passes a pointer to the aggregate as an implicit first argument to the
function in r0 (implicit in the sense that the function call in C does not
include this pointer in its specified argument list).  The callee function then
writes the return value into the memory to which the first argument passed to
the callee function (in r0) points.  The address of the returned aggregate is
passed back to the caller function in r0.
