Clone a repo to create a local repo from remote:

$ git clone <remote_location> [-o <local_name_for_remote>]
  The default local name of the remote if not specified is "origin"
  The default branch is the one currently active on the remote
Example:
$ git clone git@gitserver:/git/myproject.git
$ git branch
* master

Switch to any branch that is present in the remote:
$ git fetch <remote>
$ git branch -a
(Shows all branches available)
$ git checkout -b --track <remote/<branch>
  This creates a local branch that tracks a remote branch
Example:
$ git checkout -b --track origin/development
OR if the local branch already exists and is tracking remote:
Switch to view of latest commit that was fetched from remote:
$ git checkout <remote>/<branch>
(This will update the working directory to match the latest fetched commit
from the remote branch)

Merge previously fetched remote branch into local copy:
Switch to local branch before merging:
$ git checkout <branch>
$ git merge <remote>/<branch>

Show summary information for remotes:

$ git remote [-v]
   -v shows URLs
Example:
$ git remote -v

Show detailed information for a remote:

$ git remote show <remote_name>
Example:
$ git remote show origin

If a user's clone of a repo is older than the most recent push to a remote by
another user, the user with the now out-of-date clone must fetch and merge the
updates from the remote to their local repo before they will be permitted to
push their own updates to the remote.

Update a local repo branch to match a branch on remote:
$ git pull <remote> <branch>
Example:
$ git pull origin master
