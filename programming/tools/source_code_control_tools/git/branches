A branch is implemented in Git as a pointer to a commit.  When subsequent
commit are made to a branch, they are independent of any further commits made
on the branch from which the new branch was created (that is, the branches'
commit histories diverge but retain a common ancestor).  A later merge of the
branches causes the changes in both lines of descent to be applied (unless
there is a conflict) in a new "merge" commit on the original branch, at which
point both branches point to this new merge commit.

Exception:
If the new branch's latest commit is descended from what is still the latest
commit in the old branch, simply fast forward so that oldbranch points to the
same commit that newbranch does.  No additional merge commit is needed in this
case.

Creating a branch is recommended when adding a new software feature or fixing a
bug.  After testing, the changes in the new branch can be merged back into the
production branch (such as "master" or "main").  After being merged into
another branch, the new branch can be deleted if desired (meaning it was a
short-lived "topic" branch for a single feature change or fix), or it can be
retained for future commits (such as for a branch that is used for all
development before changes are pushed to the main production branch).  Either
way, the commits that were made along it are retained as they are now part of
the branch (such as "master" or "main") onto which they were merged.

Show branches:

$ git branch [-v[v]]
  -v : also show last commit for each branch
       -vv : also show upstream tracked branch, if any, for each local branch

Create new branch

$ git branch <branch>

Switch to branch:
(This moves HEAD to point to the specified branch and syncs the working
directory to it)

$ git checkout <branch>

Create a branch and switch to it in one command:

$ git checkout -b <branch>

Show log for branch:

$ git log <branch>
$ git log --all   # for all branches

Merge a branch (<newbranch>, like "testing") into another (<oldbranch>, like
   "master"):
$ git checkout -b <newbranch>  # create a new branch and switch to it
(... edit files in working directory for newbranch ...)
$ git commit [-a] [-m message]
(... repeat edits and commits in newbranch as necessary ...)
When ready to merge:
$ git checkout <oldbranch>
$ git merge <newbranch>  # apply commits in oldbranch to newbranch

To sync the branch that was just merged into (e.g. "master") back into the new
branch (e.g. "testing") so that further updates can be made in the new branch
using an up-to-date copy of the main branch:
$ git checkout <newbranch>
$ git merge <oldbranch>

When completely done with a branch after it has been merged, it can be deleted
(e.g. deleting a branch called "hotfix" after the hot fix has been merged into
the main branch):
$ git branch -d <branch>

Push a branch to a remote repo:
$ git push [-u] <remote> <branch>
Example:
$ git push -u origin development

Delete a branch on the remote:
$ git push <remote> --delete <branch>
Example:
$ git push origin --delete development
