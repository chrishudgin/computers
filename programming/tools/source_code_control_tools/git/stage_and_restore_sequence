The sequence through which files are staged, committed, or restored in Git is:

1. Working directory tree managed by Git.

<- git restore <file>
git add <file> ->

2. The Git index for the directory tree, contained in a subdirectory
   "index" under the ".git" directory for the tree.  The index normally
   contains one version of each file in the Git tree, but multiple versions of
   a file may be present during an uncommitted merge if there are conflicting
   contents in that file in the different versions that prevent a merge from
   completing.

<- git restore --staged <file>
git commit ->

3. The committed files under the ".git/objects" directory for the tree.
   These are stored in a zlib compressed format and contain a Git header
   specific to each file and the file's content appended to the header.
   Directory and file names are generated by a hash function in Git.

Note: If a file is not currently staged, running "git restore <file>" will
restore the file from the last commit rather than from the index.

Specify a particular commit (optionally relative to HEAD) as the basis of the
restore:
git log -p -- <file>  # show all diffs of file and find commit ID of interest
git show <commit>:<file>
git restore -s <commit> <file>  (where <commit> can be a hash or
                                    relative to HEAD, e.g. HEAD~3 for HEAD - 3)
