Follow the steps in serial_uart_setup_steps.

Connect GPIO pins on the Raspberry Pi 400 to the serial wire debug (SWD) pins
on the Raspberry Pi Pico as follows:

OpenOCD with original Pico SDK:
Raspberry Pi 400	Raspberry Pi Pico
GND (Pin 20)		SWD GND
GPIO24 (Pin 18)		SWDIO
GPIO25 (Pin 22)		SWCLK

OpenOCD from rp2040-v0.12.0 branch:
Raspberry Pi 400	Raspberry Pi Pico
GND (Pin 20)		SWD GND
GPIO8 (Pin 24)		SWDIO
GPIO11 (Pin 23)		SWCLK

Or connect JST connectors on debug cable between Raspberry Pi Debug Probe and
debug access port (DAP) on Pico WH.

Add the user account to the gpio, i2c, and spi groups:
# usermod -aG gpio,i2c,spi <username>

Install OpenOCD:
# apt-get install automake autoconf build-essential texinfo libtool libftdi-dev libusb-1.0-0-dev
$ cd ~/pico
$ git clone https://github.com/raspberrypi/openocd.git --branch rp2040-v0.12.0 --depth=1 --no-single-branch
$ cd openocd
$ ./bootstrap
$ ./configure --enable-sysfsgpio --enable-bcm2835gpio
$ make -j4
$ sudo make install

Generate Makefiles for debug builds:
$ cd ~/pico/pico-examples/
$ rm -rf build
$ mkdir build
$ cd build
$ export PICO_SDK_PATH=../../pico-sdk
$ cmake -DCMAKE_BUILD_TYPE=Debug ..
OR to disable compiler optimizations:
$ cmake -DCMAKE_BUILD_TYPE=Debug -DPICO_DEOPTIMIZED_DEBUG=1 ..
$ cd hello_world/serial
$ make -j4

Install GDB for cross-platform debugging:
# apt-get install gdb-multiarch

Start OpenOCD and leave it running in a terminal window:
Old Pico SDK with original Pico:
$ openocd -f interface/raspberrypi-swd.cfg -f target/rp2040.cfg
OpenOCD rp2040-v0.12.0 branch with Pico WH and Raspberry Pi Debug Probe
running firmware 1.3:
$ sudo openocd -f interface/cmsis-dap.cfg -f target/rp2040.cfg -c "adapter speed 5000"

Start an OpenOCD command session:
$ telnet localhost 4444

Connect to the serial port:
$ minicom -b 115200 -o -D /dev/serial0
   (serial0 is the primary UART, which should work regardless of the Pi model;
    serial0 should be a link to ttyS0 on the Pi 400 or ttyAMA0 on the Pi Zero)

$ cd ~/pico/pico-examples/build/hello_world/serial
$ gdb-multiarch hello_serial.elf
(gdb) target remote localhost:3333
(gdb) load
(gdb) monitor reset init
(gdb) b main   (if a breakpoint is desired)
(gdb) continue
