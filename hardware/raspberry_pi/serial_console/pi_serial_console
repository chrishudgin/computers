Hardware connections for a TTL to USB adapter cable:

Connect TTL leads to the Raspberry Pi GPIO header as follows:

Top row pins:
3rd: black (ground)
4th: white (Pi transmit / cable receive)
5th: green (Pi receive / cable transmit)

If 3rd pin on top row is not available, alternate ground is 5th pin from the
left on the bottom row.

*****

Hardware connections for a TTL to DB9 / RS-232 adapter board:

Use a null modem cable, not a straight through cable.

Connect TTL leads to the Raspberry Pi GPIO header as follows:

Bottom row pins:
1st: red (3.3V power) to power on adapter board; DO NOT USE 5V POWER!

Top row pins:
3rd: black (ground) to ground on adapter board
4th: green (transmit) to transmit (sic) on adapter board
5th: brown (receive) to receive (sic) on adapter board

*****

Mac software setup:

Downloaded CP210x USB to serial driver from:
http://www.silabs.com/Support%20Documents/Software/Mac_OSX_VCP_Driver.zip

Installed CP210x serial over USB driver.

Created ~chudgin/.screenrc as :

termcapinfo xterm* ti@:te@

to allow normal terminal window scrolling when using GNU screen.

Establish serial console session from Mac to Raspberry Pi:

$ screen /dev/tty.SLAB_USBtoUART 115200

Ctrl-A k to quit

*****

Raspberry Pi software setup:

# raspi-config
Interfacing Options -> Serial -> Enable
# cp -p /boot/cmdline.txt /boot/cmdline.txt.orig
# vim /boot/cmdline.txt
# diff /boot/cmdline.txt.orig /boot/cmdline.txt
1c1
< console=serial0,115200 console=tty1 root=PARTUUID=5e3da3da-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles
---
> console=tty1 console=serial0,115200 root=PARTUUID=5e3da3da-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait

If using a hardware CRT terminal like a Wyse-60, use a speed of 9600 instead
of 115200.

For Raspberry Pi OS 64-bit, add the following line to /boot/config.txt:

enable_uart=1

# systemctl reboot

*****

CentOS and Rocky Linux software setup:

Add the following line to /boot/config.txt:

enable_uart=1

# cp -p /boot/cmdline.txt /boot/cmdline.txt.orig
# vim /boot/cmdline.txt
# diff /boot/cmdline.txt.orig /boot/cmdline.txt
1c1
< console=ttyAMA0,115200 console=tty1 root=PARTUUID=3a0d4aa4-03 rootfstype=ext4 elevator=deadline rootwait
---
> console=tty1 console=ttyAMA0,115200 root=PARTUUID=3a0d4aa4-03 rootfstype=ext4 elevator=deadline rootwait

This makes the serial console device (AMA0 or ttyS0) the primary console
device.

# systemctl reboot

*****

The serial console device may have one of several names:

Raspberry Pi OS: /dev/serial0
CentOS or Rocky Linux on Raspberry Pi 3 with Bluetooth enabled: /dev/ttyS0
CentOS or Rocky Linux on Raspberry Pi models other than the Raspberry Pi 3,
   or the Raspberry Pi 3 with Bluetooth disabled: /dev/ttyAMA0

*****

Note: If the Wyse-60 has been working correctly while connected to the Pi but
there is garbage on the screen after the Wyse-60 is power-cycled, type an
alphanumeric character on the terminal keyboard (not <Enter>) and the Pi should
immediately reset its end of the terminal connection to the correct, working
settings.
